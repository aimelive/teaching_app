import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:e_connect_mobile/data/controllers/auth.dart';
import 'package:e_connect_mobile/data/controllers/chats.dart';
import 'package:e_connect_mobile/data/models/chat.dart';
import 'package:e_connect_mobile/data/models/user.dart';
import 'package:e_connect_mobile/ui/helpers/ui_utils.dart';
import 'package:e_connect_mobile/ui/screens/chat/chat_room.dart';
import 'package:e_connect_mobile/ui/screens/chat/search_users.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';

import '../../../../data/providers/stream_list_provider.dart';
import '../../../../utils/app_utils.dart';
import '../../../constants/colors.dart';
import '../../../widgets/custom_circular_progress.dart';
import '../../../widgets/custom_error_widget.dart';
import '../../../widgets/search_input.dart';
import '../../chat/widgets/chat_custom_appbar.dart';
import '../../chat/widgets/chat_user_tile.dart';

class ChatContainer extends StatefulWidget {
  const ChatContainer({super.key});

  @override
  State<ChatContainer> createState() => _ChatContainerState();
}

class _ChatContainerState extends State<ChatContainer> {
  final _chatState = Get.find<ChatsState>();
  final _currentUser = Get.find<AuthState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            ChatCustomAppbar(
              onClick: () async {
                final data = await pushPage(
                  context,
                  to: const SearchUsersChats(),
                );
                if (data.runtimeType == UserAccount && mounted) {
                  UserAccount user = data;

                  //----------------------------------------------------------------
                  String groupChatId = "";
                  String currentId = _currentUser.user.value!.id;
                  String peerId = user.id;
                  if (currentId.hashCode <= peerId.hashCode) {
                    groupChatId = '$currentId-$peerId';
                  } else {
                    groupChatId = '$peerId-$currentId';
                  }
                  //----------------------------------------------------------------
                  //
                  pushPage(
                    context,
                    to: ChatRoom(
                      user: UserChatMessage(
                        unread: 0,
                        latestMessage: ChatMessage(
                          messageId: "",
                          senderId: currentId,
                          isAutoGenerated: true,
                          message: "bot",
                          createdAt: Timestamp.now(),
                          isGroup: false,
                          groupInfo: ChatWindowInfo(
                            id: groupChatId,
                            avatar: user.profilePic,
                            desc: user.role.name,
                            name: user.names,
                          ),
                          senderInfo: ChatWindowInfo(
                            id: currentId,
                            avatar: _currentUser.user.value!.profilePic,
                            desc: _currentUser.user.value!.role.name,
                            name: _currentUser.user.value!.names,
                          ),
                          receivers: [currentId, user.id],
                          views: [currentId],
                        ),
                      ),
                    ),
                  );
                }
                if (data.runtimeType == ChatMessage) {
                  if (!mounted) return;
                  pushPage(
                    context,
                    to: ChatRoom(
                      user: UserChatMessage(
                        unread: 0,
                        latestMessage: data,
                      ),
                    ),
                  );
                }
              },
            ),
            SearchInput<ChatMessage>(
              onClosed: (message) {
                if (message == null) return;
                pushPage(
                  context,
                  to: ChatRoom(
                    user: UserChatMessage(
                      unread: 0,
                      latestMessage: message,
                    ),
                  ),
                );
              },
              delegate: MyCustomSearchDelegate(
                hintText: "Search messages",
                onSearchingSuggestionsBuilder: (query, showResults) {
                  return StreamListProvider<ChatMessage>(
                    query: Collection.chat
                        .where(
                          'receivers',
                          arrayContains: _currentUser.user.value!.id,
                        )
                        .where(
                          'message',
                          isGreaterThanOrEqualTo: query,
                          isLessThan: '${query}z',
                        ),
                    fromJson: (json, id) => ChatMessage.fromJson(json, id),
                    loading: const CustomCircularProgressIndicator(),
                    onError: (error) {
                      return CustomErrorWidget(
                        error: "Something went wrong $error",
                      );
                    },
                    onSuccess: (messages) {
                      if (messages.isEmpty) {
                        return const CustomErrorWidget(
                            error: "No message found!");
                      }

                      return ListView.builder(
                          itemCount: messages.length,
                          itemBuilder: (context, index) {
                            final suggestion = messages[index];
                            bool iAmReceiver = suggestion.senderId !=
                                    _currentUser.user.value!.id &&
                                !suggestion.isGroup;
                            return ListTile(
                              leading: CircleAvatar(
                                backgroundColor: primaryColor,
                                backgroundImage: CachedNetworkImageProvider(
                                    iAmReceiver
                                        ? suggestion.senderInfo.avatar
                                        : suggestion.groupInfo.avatar),
                              ),
                              title: Text(iAmReceiver
                                  ? suggestion.senderInfo.name
                                  : suggestion.groupInfo.name),
                              subtitle: Text(suggestion.message),
                              onTap: () {
                                query = suggestion.message;
                                showResults(context);
                                popPage<ChatMessage>(context, data: suggestion);
                              },
                            );
                          });
                    },
                  );
                },
              ),
            ),
            Container(
              padding: EdgeInsets.symmetric(horizontal: 5.w),
              child: Obx(
                () {
                  if (_chatState.chatsByUser.isEmpty) {
                    return Column(
                      children: [
                        addVerticalSpace(20),
                        const Text("You have no conversations yet!"),
                      ],
                    );
                  }
                  _chatState.chatsByUser.sort(
                    (a, b) => b.latestMessage.createdAt.compareTo(
                      a.latestMessage.createdAt,
                    ),
                  );
                  return Column(
                    children: _chatState.chatsByUser
                        .map(
                          (message) => ChatUserTile(
                            user: message,
                            currentUserId: _currentUser.user.value!.id,
                          ),
                        )
                        .toList(),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
