import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:e_connect_mobile/data/controllers/auth.dart';
import 'package:e_connect_mobile/data/controllers/chats.dart';
import 'package:e_connect_mobile/data/models/chat.dart';
import 'package:e_connect_mobile/data/models/user.dart';
import 'package:e_connect_mobile/ui/helpers/ui_utils.dart';
import 'package:e_connect_mobile/ui/screens/chat/chat_room.dart';
import 'package:e_connect_mobile/ui/screens/chat/search_users.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';

import '../../../widgets/search_input.dart';
import '../../chat/widgets/chat_custom_appbar.dart';
import '../../chat/widgets/chat_user_tile.dart';

class ChatContainer extends StatefulWidget {
  const ChatContainer({super.key});

  @override
  State<ChatContainer> createState() => _ChatContainerState();
}

class _ChatContainerState extends State<ChatContainer> {
  final _chatState = Get.find<ChatsState>();
  final _currentUser = Get.find<AuthState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          children: [
            ChatCustomAppbar(
              onClick: () async {
                final data = await pushPage(
                  context,
                  to: const SearchUsersChats(),
                );
                if (data.runtimeType == UserAccount && mounted) {
                  UserAccount user = data;
                  //
                  pushPage(
                    context,
                    to: ChatRoom(
                      user: UserChatMessage(
                        unread: 0,
                        latestMessage: ChatMessage(
                          senderId: user.id,
                          isAutoGenerated: true,
                          message: "bot",
                          createdAt: Timestamp.now(),
                          isGroup: false,
                          groupInfo: ChatWindowInfo(
                            id: '${user.id}+${_currentUser.user.value!.id}',
                            avatar: user.profilePic,
                            desc: user.role.name,
                            name: user.names,
                          ),
                          senderInfo: ChatWindowInfo(
                            id: _currentUser.user.value!.id,
                            avatar: _currentUser.user.value!.profilePic,
                            desc: _currentUser.user.value!.role.name,
                            name: _currentUser.user.value!.names,
                          ),
                          receivers: [_currentUser.user.value!.id, user.id],
                          views: [_currentUser.user.value!.id],
                        ),
                      ),
                    ),
                  );
                }
                if (data.runtimeType == ChatMessage) {
                  if (!mounted) return;
                  pushPage(
                    context,
                    to: ChatRoom(
                      user: UserChatMessage(unread: 0, latestMessage: data),
                    ),
                  );
                }
              },
            ),
            const SearchInput(),
            Container(
              padding: EdgeInsets.symmetric(horizontal: 5.w),
              child: Obx(
                () {
                  if (_chatState.chatsByUser.isEmpty) {
                    return Column(
                      children: [
                        addVerticalSpace(20),
                        const Text("You have no conversations yet!"),
                      ],
                    );
                  }
                  _chatState.chatsByUser.sort(
                    (a, b) => b.latestMessage.createdAt
                        .compareTo(a.latestMessage.createdAt),
                  );
                  return Column(
                    children: _chatState.chatsByUser
                        .map(
                          (message) => ChatUserTile(user: message),
                        )
                        .toList(),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
