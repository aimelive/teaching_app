import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:e_connect_mobile/data/controllers/auth.dart';
import 'package:e_connect_mobile/data/controllers/chats.dart';
import 'package:e_connect_mobile/data/models/chat.dart';
import 'package:e_connect_mobile/ui/constants/colors.dart';
import 'package:e_connect_mobile/ui/helpers/scroll_when_needed.dart';
import 'package:e_connect_mobile/ui/helpers/ui_utils.dart';
import 'package:e_connect_mobile/ui/screens/chat/input_container.dart';
import 'package:e_connect_mobile/utils/chat_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:swipe_image_gallery/swipe_image_gallery.dart';

import 'widgets/chat_room_appbar.dart';

class ChatRoom extends StatefulWidget {
  final UserChatMessage user;
  const ChatRoom({
    super.key,
    required this.user,
  });

  @override
  State<ChatRoom> createState() => _ChatRoomState();
}

class _ChatRoomState extends State<ChatRoom> {
  final _chatUtils = ChatUtils();
  final _chatsState = Get.find<ChatsState>();
  final _authState = Get.find<AuthState>();

  final _scrollController = ScrollController();

  List<ChatMessage> thisUser(RxList<ChatMessage> chats) {
    return chats
        .where(
          (chat) => chat.groupInfo.id == widget.user.latestMessage.groupInfo.id,
        )
        .toList();
  }

  void _sendMessage(String message, String? image) {
    final currentUser = _authState.user.value!;
    final peerUser = widget.user.latestMessage.senderInfo;

    ChatWindowInfo groupInfo = widget.user.latestMessage.groupInfo;
    if ((widget.user.latestMessage.senderId != currentUser.id) &&
        (!widget.user.latestMessage.isGroup)) {
      groupInfo = ChatWindowInfo(
        id: widget.user.latestMessage.groupInfo.id,
        avatar: peerUser.avatar,
        desc: peerUser.desc,
        name: peerUser.name,
      );
    }
    _chatUtils.sendMessage(
      ChatMessage(
        messageId: "",
        senderId: currentUser.id,
        senderInfo: ChatWindowInfo(
          id: currentUser.id,
          avatar: currentUser.profilePic,
          desc: currentUser.role.name,
          name: currentUser.names,
        ),
        isAutoGenerated: widget.user.latestMessage.isAutoGenerated,
        isGroup: widget.user.latestMessage.isGroup,
        groupInfo: groupInfo,
        message: message,
        image: image,
        createdAt: Timestamp.now(),
        receivers: widget.user.latestMessage.receivers,
        views: [currentUser.id],
      ),
      context,
      mounted,
    );
    _scrollDown();
  }

  void _scrollDown() {
    if (thisUser(_chatsState.chats).isEmpty || !_scrollController.hasClients) {
      return;
    }

    _scrollController.animateTo(
      0.0,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: true,
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Obx(
            () {
              final currentChats = thisUser(_chatsState.chats);
              return ChatRoomAppbar(
                user: widget.user,
                iAmReceiver: widget.user.latestMessage.senderId !=
                        _authState.user.value!.id &&
                    !widget.user.latestMessage.isGroup,
                currentUserId: _authState.user.value!.id,
                images:
                    currentChats.where((chat) => chat.image != null).toList(),
                totalChats: currentChats.length,
                members: currentChats.isNotEmpty
                    ? currentChats[currentChats.length - 1].receivers
                    : [],
              );
            },
          ),
          Expanded(
            child: ScrollConfiguration(
              behavior: ScrollWhenNeededBehavior(),
              child: Obx(() {
                final availableChats = thisUser(_chatsState.chats);
                final currentUserId = _authState.user.value!.id;

                if (availableChats.isEmpty) {
                  return Padding(
                    padding: EdgeInsets.all(20.sp),
                    child: Center(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          TextButton(
                            onPressed: () => _sendMessage("Hi ðŸ‘‹", null),
                            child: const Text("Say Hi ðŸ‘‹"),
                          ),
                        ],
                      ),
                    ),
                  );
                }
                final unreadMessages = availableChats
                    .where(
                      (element) =>
                          !element.views.contains(currentUserId) &&
                          element.messageId != "",
                    )
                    .map((e) => e.messageId)
                    .toList();
                _chatUtils.markMessagesAsRead(
                  unreadMessages,
                  currentUserId,
                );
                return ListView.builder(
                    controller: _scrollController,
                    reverse: true,
                    padding: EdgeInsets.zero,
                    physics: ScrollWhenNeededPhysics(
                      targetPlatform: Theme.of(context).platform,
                    ),
                    itemCount: availableChats.length,
                    itemBuilder: (_, index) {
                      final message = availableChats.reversed.toList()[index];
                      return ChatMessageTile(
                        message: message,
                        mounted: mounted,
                        isMe: message.senderId == currentUserId,
                        hasViewed: message.senderId == currentUserId &&
                            message.views.length == message.receivers.length,
                      );
                    });
              }),
            ),
          ),
          InputContainer(
            onSend: _sendMessage,
          )
        ],
      ),
      // bottomNavigationBar:,
    );
  }
}

class ChatMessageTile extends StatelessWidget {
  final ChatMessage message;
  final bool isMe;
  final bool hasViewed;
  final bool mounted;

  const ChatMessageTile({
    super.key,
    required this.message,
    required this.isMe,
    required this.hasViewed,
    required this.mounted,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisAlignment: isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
      children: [
        if (message.isGroup && !isMe)
          Container(
            margin: EdgeInsets.only(left: 12.w, right: 5.w),
            child: CircleAvatar(
              radius: 20.r,
              backgroundColor: primaryColor,
              foregroundImage:
                  CachedNetworkImageProvider(message.senderInfo.avatar),
            ),
          ),
        Container(
          decoration: BoxDecoration(
            color: isMe ? secondaryColor : primaryColor,
            borderRadius: BorderRadius.only(
              topRight: Radius.circular(isMe ? 0 : 15.r),
              bottomLeft: Radius.circular(15.r),
              bottomRight: Radius.circular(15.r),
              topLeft: Radius.circular(isMe ? 15.r : 0),
            ),
          ),
          margin: EdgeInsets.symmetric(
            vertical: 5.h,
            horizontal: message.isGroup && !isMe ? 0 : 15.w,
          ),
          padding: EdgeInsets.fromLTRB(
              15.w, message.isGroup && !isMe ? 0 : 10.r, 15.w, 10.r),
          constraints: BoxConstraints(maxWidth: 200.w),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (message.isGroup && !isMe)
                Padding(
                  padding: EdgeInsets.only(
                      top: 5.h, bottom: message.image == null ? 0.h : 5.h),
                  child: Text(
                    message.senderInfo.name,
                    maxLines: 1,
                    style: const TextStyle(overflow: TextOverflow.ellipsis),
                  ),
                ),
              if (message.image != null)
                GestureDetector(
                  onTap: () {
                    SwipeImageGallery(context: context, children: [
                      CachedNetworkImage(
                        imageUrl: message.image!,
                      )
                    ]).show();
                  },
                  child: Container(
                    margin: EdgeInsets.only(bottom: 5.r),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(8.r),
                      child: CachedNetworkImage(
                        imageUrl: message.image!,
                        height: 200,
                        width: double.infinity,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                ),
              GestureDetector(
                onLongPress: () => UiUtils.copyToClipboard(
                  context,
                  mounted,
                  text: message.message,
                ),
                child: RichText(
                  text: TextSpan(
                    children: [
                      TextSpan(
                        text: message.message,
                        style: TextStyle(
                          color: whiteColor,
                          fontSize: 15.sp,
                        ),
                      ),
                      TextSpan(
                        text:
                            "   ~${getTimeAgo(message.createdAt)}${hasViewed ? " âœ“" : ""}",
                        style: TextStyle(
                          color: Colors.grey.shade300,
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
