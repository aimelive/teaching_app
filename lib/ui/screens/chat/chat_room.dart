import 'package:cached_network_image/cached_network_image.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:e_connect_mobile/data/controllers/auth.dart';
import 'package:e_connect_mobile/data/controllers/chats.dart';
import 'package:e_connect_mobile/data/models/chat.dart';
import 'package:e_connect_mobile/ui/constants/colors.dart';
import 'package:e_connect_mobile/ui/helpers/scroll_when_needed.dart';
import 'package:e_connect_mobile/ui/helpers/ui_utils.dart';
import 'package:e_connect_mobile/ui/screens/chat/input_container.dart';
import 'package:e_connect_mobile/utils/chat_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:get/get.dart';
import 'package:swipe_image_gallery/swipe_image_gallery.dart';

import 'widgets/chat_room_appbar.dart';

class ChatRoom extends StatefulWidget {
  final UserChatMessage user;
  const ChatRoom({super.key, required this.user});

  @override
  State<ChatRoom> createState() => _ChatRoomState();
}

class _ChatRoomState extends State<ChatRoom> {
  final _chatUtils = ChatUtils();
  final _chatsState = Get.find<ChatsState>();
  final _authState = Get.find<AuthState>();

  final _scrollController = ScrollController();

  List<ChatMessage> thisUser(RxList<ChatMessage> chats) {
    return chats
        .where(
          (chat) => chat.groupInfo.id == widget.user.latestMessage.groupInfo.id,
        )
        .toList();
  }

  void _sendMessage(String message, String? image) {
    _chatUtils.sendMessage(
      ChatMessage(
        senderId: _authState.user.value!.id,
        senderInfo: ChatWindowInfo(
          id: _authState.user.value!.id,
          avatar: _authState.user.value!.profilePic,
          desc: _authState.user.value!.role.name,
          name: _authState.user.value!.names,
        ),
        isAutoGenerated: false,
        isGroup: false,
        groupInfo: widget.user.latestMessage.groupInfo,
        message: message,
        image: image,
        createdAt: Timestamp.now(),
        receivers: widget.user.latestMessage.receivers,
        views: [_authState.user.value!.id],
      ),
      context,
      mounted,
    );
    _scrollDown();
  }

  void _scrollDown() {
    if (thisUser(_chatsState.chats).isEmpty || !_scrollController.hasClients) {
      return;
    }

    _scrollController.animateTo(
      0.0,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          ChatRoomAppbar(user: widget.user),
          Expanded(
            child: ScrollConfiguration(
              behavior: ScrollWhenNeededBehavior(),
              child: Obx(() {
                if (thisUser(_chatsState.chats).isEmpty) {
                  return Padding(
                    padding: EdgeInsets.all(20.sp),
                    child: Center(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          TextButton(
                            onPressed: () => _sendMessage("Hi ðŸ‘‹", null),
                            child: const Text("Say Hi ðŸ‘‹"),
                          ),
                        ],
                      ),
                    ),
                  );
                }
                return ListView.builder(
                    controller: _scrollController,
                    reverse: true,
                    padding: EdgeInsets.zero,
                    physics: ScrollWhenNeededPhysics(
                      targetPlatform: Theme.of(context).platform,
                    ),
                    itemCount: thisUser(_chatsState.chats).length,
                    itemBuilder: (_, index) {
                      final message =
                          thisUser(_chatsState.chats).reversed.toList()[index];
                      return ChatMessageTile(
                        message: message,
                        isMe: message.senderId == _authState.user.value!.id,
                      );
                    });
              }),
            ),
          ),
        ],
      ),
      bottomNavigationBar: InputContainer(
        onSend: _sendMessage,
      ),
    );
  }
}

class ChatMessageTile extends StatelessWidget {
  final ChatMessage message;
  final bool isMe;

  const ChatMessageTile({
    super.key,
    required this.message,
    required this.isMe,
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: isMe ? MainAxisAlignment.end : MainAxisAlignment.start,
      children: [
        Container(
          decoration: BoxDecoration(
            color: isMe ? secondaryColor : primaryColor,
            borderRadius: BorderRadius.only(
              topRight: Radius.circular(isMe ? 0 : 15.r),
              bottomLeft: Radius.circular(15.r),
              bottomRight: Radius.circular(15.r),
              topLeft: Radius.circular(isMe ? 15.r : 0),
            ),
          ),
          margin: EdgeInsets.symmetric(
            vertical: 5.h,
            horizontal: 15.w,
          ),
          padding: EdgeInsets.fromLTRB(15.w, 10.r, 10.r, 10.r),
          constraints: BoxConstraints(maxWidth: 200.w),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (message.image != null)
                GestureDetector(
                  onTap: () {
                    SwipeImageGallery(context: context, children: [
                      CachedNetworkImage(
                        imageUrl: message.image!,
                      )
                    ]).show();
                  },
                  child: Container(
                    margin: EdgeInsets.only(bottom: 5.r),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(12.r),
                      child: CachedNetworkImage(
                        imageUrl: message.image!,
                        height: 200,
                        width: double.infinity,
                        fit: BoxFit.cover,
                      ),
                    ),
                  ),
                ),
              RichText(
                text: TextSpan(
                  children: [
                    TextSpan(
                      text: message.message,
                      style: TextStyle(
                        color: whiteColor,
                        fontSize: 15.sp,
                      ),
                    ),
                    TextSpan(
                      text: "   ~${getTimeAgo(message.createdAt)}",
                      style: TextStyle(
                        color: Colors.grey.shade300,
                      ),
                    )
                  ],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }
}
